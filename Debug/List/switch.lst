###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       03/Apr/2014  00:02:40 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\sw #
#                     itch.c                                                  #
#    Command line  =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\sw #
#                     itch.c -lC C:\Users\Nathan\Documents\GitHub\ece306-gps- #
#                     receiver\Debug\List\ -o C:\Users\Nathan\Documents\GitHu #
#                     b\ece306-gps-receiver\Debug\Obj\ --no_cse --no_unroll   #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430FR5739__ -e --double=32 --dlib_config         #
#                     "C:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\De #
#                     bug\List\switch.lst                                     #
#    Object file   =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\De #
#                     bug\Obj\switch.r43                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\switch.c
      1          /******************************************************************************
      2          Switch Configurations
      3          
      4          DESC: Contains methods that poll the switches and act on that information
      5          
      6          GLOBALS: display_1 and display_2, current_SW1_state, and current_SW2_state are changed
      7          None defined.
      8          
      9          Nathan Hansen, 7 Feb 2014, Built with IAR Embedded Workbench Version: 5.60.5
     10          ******************************************************************************/
     11          
     12          
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2
     16          
     17          #pragma vector=PORT4_VECTOR

   \                                 In  segment ISR_CODE, align 2
     18          __interrupt void Port_4(void)
   \                     Port_4:
     19          {
   \   000000   3F15         PUSHM.W #0x4, R15
     20          	if(P4IFG & SW1)
   \   000002   D2B33D02     BIT.B   #0x1, &0x23d
   \   000006   0C28         JNC     ??Port_4_0
     21          	{
     22          		P4IFG &= ~SW1;
   \   000008   D2C33D02     BIC.B   #0x1, &0x23d
     23          		
     24          		if(DebounceTimer == 0)
   \   00000C   8293....     CMP.W   #0x0, &DebounceTimer
   \   000010   0720         JNE     ??Port_4_0
     25          		{
     26          			writeUsb('Q');
   \   000012   7C405100     MOV.B   #0x51, R12
   \   000016   ........     CALLA   #writeUsb
     27          			DebounceTimer = 100;
   \   00001A   B2406400.... MOV.W   #0x64, &DebounceTimer
     28          		}
     29          	}
     30          			
     31          	if(P4IFG & SW2)
   \                     ??Port_4_0:
   \   000020   E2B33D02     BIT.B   #0x2, &0x23d
   \   000024   0C28         JNC     ??Port_4_1
     32          	{
     33          		P4IFG &= ~SW2;
   \   000026   E2C33D02     BIC.B   #0x2, &0x23d
     34          		
     35          		if(DebounceTimer == 0)
   \   00002A   8293....     CMP.W   #0x0, &DebounceTimer
   \   00002E   0720         JNE     ??Port_4_1
     36          		{
     37          			writeSerial('Q');
   \   000030   7C405100     MOV.B   #0x51, R12
   \   000034   ........     CALLA   #writeSerial
     38          			DebounceTimer = 100;
   \   000038   B2406400.... MOV.W   #0x64, &DebounceTimer
     39          		}
     40          	}		
     41          }
   \                     ??Port_4_1:
   \   00003E   3C17         POPM.W  #0x4, R15
   \   000040   0013         RETI
   \   000042                REQUIRE _A_PBIFG_L
     42          
     43          //Switches_Process
     44          //DESC: Detects switch toggle (press & release) by polling current states
     45          //and comparing to records of the past state. On switch toggle, motor forward outputs
     46          //and LCD readout of motor status are toggled on/off accordingly
     47          //ARGS: None
     48          //RET: None

   \                                 In  segment CODE, align 2
     49          void Switches_Process(void)
   \                     Switches_Process:
     50          {
     51          	char current_sw1_state = isPressed(SW1);
   \   000000   1C43         MOV.W   #0x1, R12
   \   000002   ........     CALLA   #isPressed
   \   000006   4E4C         MOV.B   R12, R14
     52          	char current_sw2_state = isPressed(SW2);
   \   000008   2C43         MOV.W   #0x2, R12
   \   00000A   ........     CALLA   #isPressed
     53          	
     54          	if ( !Last_SW1_State && current_sw1_state )
   \   00000E   5F42....     MOV.B   &Last_SW1_State, R15
     55          	{               
     56          		
     57          	}
     58          	
     59          	if ( !Last_SW2_State && current_sw2_state ) 
   \   000012   5D42....     MOV.B   &Last_SW2_State, R13
     60          	{
     61          
     62          	}
     63          	
     64          	Last_SW1_State = current_sw1_state;
   \   000016   C24E....     MOV.B   R14, &Last_SW1_State
     65          	Last_SW2_State = current_sw2_state;
   \   00001A   C24C....     MOV.B   R12, &Last_SW2_State
     66          }
   \   00001E   1001         RETA
     67          
     68          //isPressed
     69          //DESC: Used for polling the current pressed/not pressed status of either switch
     70          //ARGS: Macro or mask that acts to select the corresponding bit for the desires switch
     71          //RET: 1 if 'isPressed'; 0 if not 'isPressed'

   \                                 In  segment CODE, align 2
     72          char isPressed(int switchNum)
   \                     isPressed:
     73          {
     74          	if( (switchNum == SW1) || (switchNum == SW2) )
   \   000000   1C93         CMP.W   #0x1, R12
   \   000002   0224         JEQ     ??isPressed_2
   \   000004   2C93         CMP.W   #0x2, R12
   \   000006   0720         JNE     ??isPressed_3
     75          		return !(P4IN & switchNum);
   \                     ??isPressed_2:
   \   000008   C2BC2102     BIT.B   R12, &0x221
   \   00000C   0220         JNE     ??isPressed_4
   \   00000E   5C43         MOV.B   #0x1, R12
   \   000010   1001         RETA
   \                     ??isPressed_4:
   \   000012   4C43         MOV.B   #0x0, R12
   \   000014   1001         RETA
     76          	return 0;
   \                     ??isPressed_3:
   \   000016   4C43         MOV.B   #0x0, R12
   \   000018   1001         RETA
   \   00001A                REQUIRE _A_PBIN_L
     77          }

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??Port_4??INTVEC 64`:
   \   000040   ....         DC16    Port_4

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Port_4
       12   -> writeSerial
       12   -> writeUsb
      4   Switches_Process
        4   -> isPressed
      4   isPressed


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??Port_4??INTVEC 64
      66  Port_4
      32  Switches_Process
       2  _A_PBIFG_L
       2  _A_PBIN_L
      26  isPressed

 
 58 bytes in segment CODE
  4 bytes in segment DATA16_AN
  2 bytes in segment INTVEC
 66 bytes in segment ISR_CODE
 
 124 bytes of CODE  memory
   0 bytes of CONST memory (+ 2 bytes shared)
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
