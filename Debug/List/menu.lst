###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       04/Apr/2014  00:31:20 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\menu.c     #
#    Command line  =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\menu.c     #
#                     -lC C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\ #
#                     List\ -o C:\Users\Nathan\Documents\GitHub\ece-306-HW9\D #
#                     ebug\Obj\ --no_cse --no_unroll --no_inline              #
#                     --no_code_motion --no_tbaa --debug -D__MSP430FR5739__   #
#                     -e --double=32 --dlib_config "C:\Program Files          #
#                     (x86)\IAR Systems\Embedded Workbench                    #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\List #
#                     \menu.lst                                               #
#    Object file   =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\Obj\ #
#                     menu.r43                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Nathan\Documents\GitHub\ece-306-HW9\menu.c
      1          #include "msp430.h"
      2          #include "macros.h"
      3          #include "functions.h"
      4          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      5          char isQuit = 0;
   \                     isQuit:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      6          char isSelected = 0;
   \                     isSelected:
   \   000000                DS8 1
      7          

   \                                 In  segment DATA16_I, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      8          char Song[225] = "We're the Red and White from State, and we know we are the best. A hand behind our back, We can take on all the rest. Come over the hill, Carolina. Devils and Deacs stand in line. The Red and White from N.C. State. Go State!";
   \                     Song:
   \   000000                DS8 225
   \   0000E1                REQUIRE `?<Initializer for Song>`
      9          
     10          

   \                                 In  segment CODE, align 2
     11          void ResistorMenu(void)
   \                     ResistorMenu:
     12          {
   \   000000   0A3C         JMP     ??ResistorMenu_2
     13            while(!isQuit)
     14            {
     15                    ADC_Process();      
     16                    //          "0123456789abcdef"
     17                    display_1 = "  Value  Color  ";
     18                    
     19                    switch(ADC_Thumb/102)
     20                    {
     21                    case 0:
     22                      //          "123456789abcdef"
     23                      display_2 = "   0   Black   ";
     24                      break;
     25                    case 1:
     26                      //          "123456789abcdef"
     27                      display_2 = "   1   Brown   ";
     28                      break;
     29                    case 2:
     30                      //          "123456789abcdef"
     31                      display_2 = "   2   Brown   ";
     32                      break;
     33                    case 3:
     34                      //          "123456789abcdef"
     35                      display_2 = "   3     Red   ";
     36                      break;
     37                    case 4:
     38                      //          "123456789abcdef"
     39                      display_2 = "   4   Yellow  ";
     40                      break;
     41                    case 5:
     42                     //          "123456789abcdef"
     43                      display_2 = "   5   Green  ";
     44                      break;
     45                    case 6:
     46                     //          "123456789abcdef"
     47                      display_2 = "   6    Blue  ";
     48                      break;
     49                    case 7:
     50                      //          "123456789abcdef"
     51                      display_2 = "   7   Violet  ";
     52                      break;
     53                    case 8:
     54                      //          "123456789abcdef"
     55                      display_2 = "   8    Gray   ";
     56                      break;
     57                    case 9:
     58                      //          "123456789abcdef"
     59                      display_2 = "   9   White   ";
     60                      break;
     61                    default:
     62                      break;
     63                    }
     64                    
     65                    if(TimeMsec % EVERY_50 == RESET_TIME)
   \                     ??ResistorMenu_0:
   \   000002   1C42....     MOV.W   &TimeMsec, R12
   \   000006   3E403200     MOV.W   #0x32, R14
   \   00000A   ........     CALLA   #?DivMod16u
   \   00000E   0E93         CMP.W   #0x0, R14
   \   000010   0220         JNE     ??ResistorMenu_2
     66                            Display_Process();
   \   000012   ........     CALLA   #Display_Process
   \                     ??ResistorMenu_2:
   \   000016   C293....     CMP.B   #0x0, &isQuit
   \   00001A   4820         JNE     ??ResistorMenu_3
   \   00001C   ........     CALLA   #ADC_Process
   \   000020   B240........ MOV.W   #`?<Constant "  Value  Color  ">`, &display_1
   \   000026   1C42....     MOV.W   &ADC_Thumb, R12
   \   00002A   3E406600     MOV.W   #0x66, R14
   \   00002E   ........     CALLA   #?DivMod16s
   \   000032   0C83         SUB.W   #0x0, R12
   \   000034   1324         JEQ     ??ResistorMenu_4
   \   000036   1C83         SUB.W   #0x1, R12
   \   000038   1524         JEQ     ??ResistorMenu_5
   \   00003A   1C83         SUB.W   #0x1, R12
   \   00003C   1724         JEQ     ??ResistorMenu_6
   \   00003E   1C83         SUB.W   #0x1, R12
   \   000040   1924         JEQ     ??ResistorMenu_7
   \   000042   1C83         SUB.W   #0x1, R12
   \   000044   1B24         JEQ     ??ResistorMenu_8
   \   000046   1C83         SUB.W   #0x1, R12
   \   000048   1D24         JEQ     ??ResistorMenu_9
   \   00004A   1C83         SUB.W   #0x1, R12
   \   00004C   1F24         JEQ     ??ResistorMenu_10
   \   00004E   1C83         SUB.W   #0x1, R12
   \   000050   2124         JEQ     ??ResistorMenu_11
   \   000052   1C83         SUB.W   #0x1, R12
   \   000054   2324         JEQ     ??ResistorMenu_12
   \   000056   1C83         SUB.W   #0x1, R12
   \   000058   2524         JEQ     ??ResistorMenu_13
   \   00005A   D33F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_4:
   \   00005C   B240........ MOV.W   #`?<Constant "   0   Black   ">`, &display_2
   \   000062   CF3F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_5:
   \   000064   B240........ MOV.W   #`?<Constant "   1   Brown   ">`, &display_2
   \   00006A   CB3F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_6:
   \   00006C   B240........ MOV.W   #`?<Constant "   2   Brown   ">`, &display_2
   \   000072   C73F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_7:
   \   000074   B240........ MOV.W   #`?<Constant "   3     Red   ">`, &display_2
   \   00007A   C33F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_8:
   \   00007C   B240........ MOV.W   #`?<Constant "   4   Yellow  ">`, &display_2
   \   000082   BF3F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_9:
   \   000084   B240........ MOV.W   #`?<Constant "   5   Green  ">`, &display_2
   \   00008A   BB3F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_10:
   \   00008C   B240........ MOV.W   #`?<Constant "   6    Blue  ">`, &display_2
   \   000092   B73F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_11:
   \   000094   B240........ MOV.W   #`?<Constant "   7   Violet  ">`, &display_2
   \   00009A   B33F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_12:
   \   00009C   B240........ MOV.W   #`?<Constant "   8    Gray   ">`, &display_2
   \   0000A2   AF3F         JMP     ??ResistorMenu_0
   \                     ??ResistorMenu_13:
   \   0000A4   B240........ MOV.W   #`?<Constant "   9   White   ">`, &display_2
   \   0000AA   AB3F         JMP     ??ResistorMenu_0
     67            }
     68            
     69            isQuit = 0;
   \                     ??ResistorMenu_3:
   \   0000AC   C243....     MOV.B   #0x0, &isQuit
     70          }
   \   0000B0   1001         RETA
     71          

   \                                 In  segment CODE, align 2
     72          void ShapesMenu(void)
   \                     ShapesMenu:
     73          {
   \   000000   0A3C         JMP     ??ShapesMenu_2
     74            while(!isQuit)
     75            {
     76                    ADC_Process();      
     77                    
     78                    switch(ADC_Thumb/102)
     79                    {
     80                    case 0:
     81                      //          "123456789abcdef"
     82                      display_1 = "     Circle    ";
     83                      display_2 = "     Square    ";
     84                      break;
     85                    case 1:
     86                      //          "123456789abcdef"
     87                      display_1 = "     Square    ";
     88                      display_2 = "    Triangle   ";
     89                      break;
     90                    case 2:
     91                      //          "123456789abcdef"
     92                      display_1 = "    Triangle   ";
     93                      display_2 = "    Octagon    ";
     94                      break;
     95                    case 3:
     96                      //          "123456789abcdef"
     97                      display_1 = "    Octagon    ";
     98                      display_2 = "    Pentagon   ";
     99                      break;
    100                    case 4:
    101                      //          "123456789abcdef"
    102                      display_1 = "    Pentagon   ";
    103                      display_2 = "    Hexagon    ";
    104                      break;
    105                    case 5:
    106                      //          "123456789abcdef"
    107                      display_1 = "    Hexagon    ";
    108                      display_2 = "      Cube     ";
    109                      break;
    110                    case 6:
    111                     //           "123456789abcdef"
    112                      display_1 = "      Cube     ";
    113                      display_2 = "      Oval     ";
    114                      break;
    115                    case 7:
    116                      //          "123456789abcdef"
    117                      display_1 = "      Oval     ";
    118                      display_2 = "     Sphere    ";
    119                      break;
    120                    case 8:
    121                      //          "123456789abcdef"
    122                      display_1 = "     Sphere    ";
    123                      display_2 = "    Cylinder   ";
    124                      break;
    125                    case 9:
    126                      //          "123456789abcdef"
    127                      display_1 = "    Cylinder   ";
    128                      display_2 = "  END OF LIST  ";
    129                      break;
    130                    default:
    131                      break;
    132                    }
    133                    
    134                    if(TimeMsec % EVERY_50 == RESET_TIME)
   \                     ??ShapesMenu_0:
   \   000002   1C42....     MOV.W   &TimeMsec, R12
   \   000006   3E403200     MOV.W   #0x32, R14
   \   00000A   ........     CALLA   #?DivMod16u
   \   00000E   0E93         CMP.W   #0x0, R14
   \   000010   0220         JNE     ??ShapesMenu_2
    135                            Display_Process();
   \   000012   ........     CALLA   #Display_Process
   \                     ??ShapesMenu_2:
   \   000016   C293....     CMP.B   #0x0, &isQuit
   \   00001A   6320         JNE     ??ShapesMenu_3
   \   00001C   ........     CALLA   #ADC_Process
   \   000020   1C42....     MOV.W   &ADC_Thumb, R12
   \   000024   3E406600     MOV.W   #0x66, R14
   \   000028   ........     CALLA   #?DivMod16s
   \   00002C   0C83         SUB.W   #0x0, R12
   \   00002E   1324         JEQ     ??ShapesMenu_4
   \   000030   1C83         SUB.W   #0x1, R12
   \   000032   1824         JEQ     ??ShapesMenu_5
   \   000034   1C83         SUB.W   #0x1, R12
   \   000036   1D24         JEQ     ??ShapesMenu_6
   \   000038   1C83         SUB.W   #0x1, R12
   \   00003A   2224         JEQ     ??ShapesMenu_7
   \   00003C   1C83         SUB.W   #0x1, R12
   \   00003E   2724         JEQ     ??ShapesMenu_8
   \   000040   1C83         SUB.W   #0x1, R12
   \   000042   2C24         JEQ     ??ShapesMenu_9
   \   000044   1C83         SUB.W   #0x1, R12
   \   000046   3124         JEQ     ??ShapesMenu_10
   \   000048   1C83         SUB.W   #0x1, R12
   \   00004A   3624         JEQ     ??ShapesMenu_11
   \   00004C   1C83         SUB.W   #0x1, R12
   \   00004E   3B24         JEQ     ??ShapesMenu_12
   \   000050   1C83         SUB.W   #0x1, R12
   \   000052   4024         JEQ     ??ShapesMenu_13
   \   000054   D63F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_4:
   \   000056   B240........ MOV.W   #`?<Constant "     Circle    ">`, &display_1
   \   00005C   B240........ MOV.W   #`?<Constant "     Square    ">`, &display_2
   \   000062   CF3F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_5:
   \   000064   B240........ MOV.W   #`?<Constant "     Square    ">`, &display_1
   \   00006A   B240........ MOV.W   #`?<Constant "    Triangle   ">`, &display_2
   \   000070   C83F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_6:
   \   000072   B240........ MOV.W   #`?<Constant "    Triangle   ">`, &display_1
   \   000078   B240........ MOV.W   #`?<Constant "    Octagon    ">`, &display_2
   \   00007E   C13F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_7:
   \   000080   B240........ MOV.W   #`?<Constant "    Octagon    ">`, &display_1
   \   000086   B240........ MOV.W   #`?<Constant "    Pentagon   ">`, &display_2
   \   00008C   BA3F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_8:
   \   00008E   B240........ MOV.W   #`?<Constant "    Pentagon   ">`, &display_1
   \   000094   B240........ MOV.W   #`?<Constant "    Hexagon    ">`, &display_2
   \   00009A   B33F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_9:
   \   00009C   B240........ MOV.W   #`?<Constant "    Hexagon    ">`, &display_1
   \   0000A2   B240........ MOV.W   #`?<Constant "      Cube     ">`, &display_2
   \   0000A8   AC3F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_10:
   \   0000AA   B240........ MOV.W   #`?<Constant "      Cube     ">`, &display_1
   \   0000B0   B240........ MOV.W   #`?<Constant "      Oval     ">`, &display_2
   \   0000B6   A53F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_11:
   \   0000B8   B240........ MOV.W   #`?<Constant "      Oval     ">`, &display_1
   \   0000BE   B240........ MOV.W   #`?<Constant "     Sphere    ">`, &display_2
   \   0000C4   9E3F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_12:
   \   0000C6   B240........ MOV.W   #`?<Constant "     Sphere    ">`, &display_1
   \   0000CC   B240........ MOV.W   #`?<Constant "    Cylinder   ">`, &display_2
   \   0000D2   973F         JMP     ??ShapesMenu_0
   \                     ??ShapesMenu_13:
   \   0000D4   B240........ MOV.W   #`?<Constant "    Cylinder   ">`, &display_1
   \   0000DA   B240........ MOV.W   #`?<Constant "  END OF LIST  ">`, &display_2
   \   0000E0   903F         JMP     ??ShapesMenu_0
    136            }
    137            
    138            isQuit = 0;
   \                     ??ShapesMenu_3:
   \   0000E2   C243....     MOV.B   #0x0, &isQuit
    139          }
   \   0000E6   1001         RETA
    140          

   \                                 In  segment CODE, align 2
    141          void SongMenu(void)
   \                     SongMenu:
    142          {
    143            ScrollIndex = 0;
   \   000000   8243....     MOV.W   #0x0, &ScrollIndex
   \   000004   353C         JMP     ??SongMenu_2
    144            
    145            while(!isQuit)
    146            {
    147              
    148              
    149              for(int i = 0; i < DISPLAY_SIZE; i++)
    150                display_2[i] = Song[i+ScrollIndex];
   \                     ??SongMenu_0:
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E52....     ADD.W   &ScrollIndex, R14
   \   00000C   1D42....     MOV.W   &display_2, R13
   \   000010   0D5F         ADD.W   R15, R13
   \   000012   DD4E....0000 MOV.B   Song(R14), 0(R13)
   \   000018   1F53         ADD.W   #0x1, R15
   \                     ??SongMenu_1:
   \   00001A   3F901000     CMP.W   #0x10, R15
   \   00001E   F33B         JL      ??SongMenu_0
    151              
    152              if(TimeMsec % 10 == 0)
   \   000020   1C42....     MOV.W   &TimeMsec, R12
   \   000024   3E400A00     MOV.W   #0xa, R14
   \   000028   ........     CALLA   #?DivMod16u
   \   00002C   0E93         CMP.W   #0x0, R14
   \   00002E   1620         JNE     ??SongMenu_3
    153              {
    154                      ADC_Process();
   \   000030   ........     CALLA   #ADC_Process
    155                
    156                if(ADC_Thumb - OldThumb > 5)
                       ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000034   1F42....     MOV.W   &ADC_Thumb, R15
   \   000038   1F82....     SUB.W   &OldThumb, R15
   \   00003C   3F900600     CMP.W   #0x6, R15
   \   000040   0238         JL      ??SongMenu_4
    157                  ScrollIndex++;
   \   000042   9253....     ADD.W   #0x1, &ScrollIndex
    158                
    159                OldThumb = ADC_Thumb;
   \                     ??SongMenu_4:
   \   000046   9242........ MOV.W   &ADC_Thumb, &OldThumb
    160                ScrollIndex %= (sizeof Song - DISPLAY_SIZE);
   \   00004C   1C42....     MOV.W   &ScrollIndex, R12
   \   000050   3E40D100     MOV.W   #0xd1, R14
   \   000054   ........     CALLA   #?DivMod16u
   \   000058   824E....     MOV.W   R14, &ScrollIndex
    161              }
    162              
    163              if(TimeMsec % EVERY_50 == RESET_TIME)
   \                     ??SongMenu_3:
   \   00005C   1C42....     MOV.W   &TimeMsec, R12
   \   000060   3E403200     MOV.W   #0x32, R14
   \   000064   ........     CALLA   #?DivMod16u
   \   000068   0E93         CMP.W   #0x0, R14
   \   00006A   0220         JNE     ??SongMenu_2
    164              {
    165                Display_Process();
   \   00006C   ........     CALLA   #Display_Process
    166              }
   \                     ??SongMenu_2:
   \   000070   C293....     CMP.B   #0x0, &isQuit
   \   000074   0220         JNE     ??SongMenu_5
   \   000076   0F43         MOV.W   #0x0, R15
   \   000078   D03F         JMP     ??SongMenu_1
    167              
    168          
    169            }
    170            
    171            isQuit = 0;
   \                     ??SongMenu_5:
   \   00007A   C243....     MOV.B   #0x0, &isQuit
    172          }
   \   00007E   1001         RETA
    173          

   \                                 In  segment CODE, align 2
    174          void Menu_Process(void)
   \                     Menu_Process:
    175          {
    176            if(!isSelected)
   \   000000   C293....     CMP.B   #0x0, &isSelected
   \   000004   1324         JEQ     ??Menu_Process_1
    177              return;
    178            
    179            switch(ProgramState)
   \   000006   1F42....     MOV.W   &ProgramState, R15
   \   00000A   0F83         SUB.W   #0x0, R15
   \   00000C   0524         JEQ     ??Menu_Process_2
   \   00000E   1F83         SUB.W   #0x1, R15
   \   000010   0624         JEQ     ??Menu_Process_3
   \   000012   1F83         SUB.W   #0x1, R15
   \   000014   0724         JEQ     ??Menu_Process_4
   \   000016   083C         JMP     ??Menu_Process_5
    180            {
    181              case 0:
    182                ResistorMenu();
   \                     ??Menu_Process_2:
   \   000018   ........     CALLA   #ResistorMenu
    183                break;
   \   00001C   053C         JMP     ??Menu_Process_5
    184              case 1:
    185                ShapesMenu();
   \                     ??Menu_Process_3:
   \   00001E   ........     CALLA   #ShapesMenu
    186                break;
   \   000022   023C         JMP     ??Menu_Process_5
    187              case 2: 
    188                SongMenu();
   \                     ??Menu_Process_4:
   \   000024   ........     CALLA   #SongMenu
    189                break;    
    190            }
    191            
    192            isSelected = 0;
   \                     ??Menu_Process_5:
   \   000028   C243....     MOV.B   #0x0, &isSelected
    193          }
   \                     ??Menu_Process_1:
   \   00002C   1001         RETA
    194          

   \                                 In  segment CODE, align 2
    195          void MenuSelect(void)
   \                     MenuSelect:
    196          {
    197            isSelected = 1;
   \   000000   D243....     MOV.B   #0x1, &isSelected
    198          }
   \   000004   1001         RETA
    199          

   \                                 In  segment CODE, align 2
    200          void MenuQuit(void)
   \                     MenuQuit:
    201          {
    202            isQuit = 1;
   \   000000   D243....     MOV.B   #0x1, &isQuit
    203          }
   \   000004   1001         RETA

   \                                 In  segment DATA16_ID, align 1, align-sorted
   \                     `?<Initializer for Song>`:
   \   000000   576527726520 DC8 57H, 65H, 27H, 72H, 65H, 20H, 74H, 68H
   \            7468        
   \   000008   652052656420 DC8 65H, 20H, 52H, 65H, 64H, 20H, 61H, 6EH
   \            616E        
   \   000010   642057686974 DC8 64H, 20H, 57H, 68H, 69H, 74H, 65H, 20H
   \            6520        
   \   000018   66726F6D2053 DC8 66H, 72H, 6FH, 6DH, 20H, 53H, 74H, 61H
   \            7461        
   \   000020   74652C20616E DC8 74H, 65H, 2CH, 20H, 61H, 6EH, 64H, 20H
   \            6420        
   \   000028   7765206B6E6F DC8 77H, 65H, 20H, 6BH, 6EH, 6FH, 77H, 20H
   \            7720        
   \   000030   776520617265 DC8 77H, 65H, 20H, 61H, 72H, 65H, 20H, 74H
   \            2074        
   \   000038   686520626573 DC8 68H, 65H, 20H, 62H, 65H, 73H, 74H, 2EH
   \            742E        
   \   000040   20412068616E DC8 20H, 41H, 20H, 68H, 61H, 6EH, 64H, 20H
   \            6420        
   \   000048   626568696E64 DC8 62H, 65H, 68H, 69H, 6EH, 64H, 20H, 6FH
   \            206F        
   \   000050   757220626163 DC8 75H, 72H, 20H, 62H, 61H, 63H, 6BH, 2CH
   \            6B2C        
   \   000058   205765206361 DC8 20H, 57H, 65H, 20H, 63H, 61H, 6EH, 20H
   \            6E20        
   \   000060   74616B65206F DC8 74H, 61H, 6BH, 65H, 20H, 6FH, 6EH, 20H
   \            6E20        
   \   000068   616C6C207468 DC8 61H, 6CH, 6CH, 20H, 74H, 68H, 65H, 20H
   \            6520        
   \   000070   726573742E20 DC8 72H, 65H, 73H, 74H, 2EH, 20H, 43H, 6FH
   \            436F        
   \   000078   6D65206F7665 DC8 6DH, 65H, 20H, 6FH, 76H, 65H, 72H, 20H
   \            7220        
   \   000080   746865206869 DC8 74H, 68H, 65H, 20H, 68H, 69H, 6CH, 6CH
   \            6C6C        
   \   000088   2C204361726F DC8 2CH, 20H, 43H, 61H, 72H, 6FH, 6CH, 69H
   \            6C69        
   \   000090   6E612E204465 DC8 6EH, 61H, 2EH, 20H, 44H, 65H, 76H, 69H
   \            7669        
   \   000098   6C7320616E64 DC8 6CH, 73H, 20H, 61H, 6EH, 64H, 20H, 44H
   \            2044        
   \   0000A0   656163732073 DC8 65H, 61H, 63H, 73H, 20H, 73H, 74H, 61H
   \            7461        
   \   0000A8   6E6420696E20 DC8 6EH, 64H, 20H, 69H, 6EH, 20H, 6CH, 69H
   \            6C69        
   \   0000B0   6E652E205468 DC8 6EH, 65H, 2EH, 20H, 54H, 68H, 65H, 20H
   \            6520        
   \   0000B8   52656420616E DC8 52H, 65H, 64H, 20H, 61H, 6EH, 64H, 20H
   \            6420        
   \   0000C0   576869746520 DC8 57H, 68H, 69H, 74H, 65H, 20H, 66H, 72H
   \            6672        
   \   0000C8   6F6D204E2E43 DC8 6FH, 6DH, 20H, 4EH, 2EH, 43H, 2EH, 20H
   \            2E20        
   \   0000D0   53746174652E DC8 53H, 74H, 61H, 74H, 65H, 2EH, 20H, 47H
   \            2047        
   \   0000D8   6F2053746174 DC8 6FH, 20H, 53H, 74H, 61H, 74H, 65H, 21H
   \            6521        
   \   0000E0   00           DC8 0

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  Value  Color  ">`:
   \   000000   202056616C75 DC8 "  Value  Color  "
   \            652020436F6C
   \            6F72202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   0   Black   ">`:
   \   000000   202020302020 DC8 "   0   Black   "
   \            20426C61636B
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   1   Brown   ">`:
   \   000000   202020312020 DC8 "   1   Brown   "
   \            2042726F776E
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   2   Brown   ">`:
   \   000000   202020322020 DC8 "   2   Brown   "
   \            2042726F776E
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   3     Red   ">`:
   \   000000   202020332020 DC8 "   3     Red   "
   \            202020526564
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   4   Yellow  ">`:
   \   000000   202020342020 DC8 "   4   Yellow  "
   \            2059656C6C6F
   \            77202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   5   Green  ">`:
   \   000000   202020352020 DC8 "   5   Green  "
   \            20477265656E
   \            202000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   6    Blue  ">`:
   \   000000   202020362020 DC8 "   6    Blue  "
   \            2020426C7565
   \            202000      

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   7   Violet  ">`:
   \   000000   202020372020 DC8 "   7   Violet  "
   \            2056696F6C65
   \            74202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   8    Gray   ">`:
   \   000000   202020382020 DC8 "   8    Gray   "
   \            202047726179
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   9   White   ">`:
   \   000000   202020392020 DC8 "   9   White   "
   \            205768697465
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "     Circle    ">`:
   \   000000   202020202043 DC8 "     Circle    "
   \            6972636C6520
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "     Square    ">`:
   \   000000   202020202053 DC8 "     Square    "
   \            717561726520
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    Triangle   ">`:
   \   000000   202020205472 DC8 "    Triangle   "
   \            69616E676C65
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    Octagon    ">`:
   \   000000   202020204F63 DC8 "    Octagon    "
   \            7461676F6E20
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    Pentagon   ">`:
   \   000000   202020205065 DC8 "    Pentagon   "
   \            6E7461676F6E
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    Hexagon    ">`:
   \   000000   202020204865 DC8 "    Hexagon    "
   \            7861676F6E20
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "      Cube     ">`:
   \   000000   202020202020 DC8 "      Cube     "
   \            437562652020
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "      Oval     ">`:
   \   000000   202020202020 DC8 "      Oval     "
   \            4F76616C2020
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "     Sphere    ">`:
   \   000000   202020202053 DC8 "     Sphere    "
   \            706865726520
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "    Cylinder   ">`:
   \   000000   202020204379 DC8 "    Cylinder   "
   \            6C696E646572
   \            20202000    

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  END OF LIST  ">`:
   \   000000   2020454E4420 DC8 "  END OF LIST  "
   \            4F46204C4953
   \            54202000    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   MenuQuit
      4   MenuSelect
      4   Menu_Process
        4   -> ResistorMenu
        4   -> ShapesMenu
        4   -> SongMenu
      4   ResistorMenu
        4   -> ADC_Process
        4   -> Display_Process
      4   ShapesMenu
        4   -> ADC_Process
        4   -> Display_Process
      4   SongMenu
        4   -> ADC_Process
        4   -> Display_Process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "      Cube     ">
      16  ?<Constant "      Oval     ">
      16  ?<Constant "     Circle    ">
      16  ?<Constant "     Sphere    ">
      16  ?<Constant "     Square    ">
      16  ?<Constant "    Cylinder   ">
      16  ?<Constant "    Hexagon    ">
      16  ?<Constant "    Octagon    ">
      16  ?<Constant "    Pentagon   ">
      16  ?<Constant "    Triangle   ">
      16  ?<Constant "   0   Black   ">
      16  ?<Constant "   1   Brown   ">
      16  ?<Constant "   2   Brown   ">
      16  ?<Constant "   3     Red   ">
      16  ?<Constant "   4   Yellow  ">
      15  ?<Constant "   5   Green  ">
      15  ?<Constant "   6    Blue  ">
      16  ?<Constant "   7   Violet  ">
      16  ?<Constant "   8    Gray   ">
      16  ?<Constant "   9   White   ">
      16  ?<Constant "  END OF LIST  ">
      17  ?<Constant "  Value  Color  ">
     225  ?<Initializer for Song>
       6  MenuQuit
       6  MenuSelect
      46  Menu_Process
     178  ResistorMenu
     232  ShapesMenu
     225  Song
     128  SongMenu
       1  isQuit
       1  isSelected

 
 596 bytes in segment CODE
 351 bytes in segment DATA16_C
 225 bytes in segment DATA16_I
 225 bytes in segment DATA16_ID
   2 bytes in segment DATA16_Z
 
 596 bytes of CODE  memory
 576 bytes of CONST memory
 227 bytes of DATA  memory

Errors: none
Warnings: 1
