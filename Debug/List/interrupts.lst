###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       04/Apr/2014  00:03:51 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\interrupts #
#                     .c                                                      #
#    Command line  =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\interrupts #
#                     .c -lC C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Deb #
#                     ug\List\ -o C:\Users\Nathan\Documents\GitHub\ece-306-HW #
#                     9\Debug\Obj\ --no_cse --no_unroll --no_inline           #
#                     --no_code_motion --no_tbaa --debug -D__MSP430FR5739__   #
#                     -e --double=32 --dlib_config "C:\Program Files          #
#                     (x86)\IAR Systems\Embedded Workbench                    #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\List #
#                     \interrupts.lst                                         #
#    Object file   =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\Obj\ #
#                     interrupts.r43                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Nathan\Documents\GitHub\ece-306-HW9\interrupts.c
      1          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADC10CTL0_L
   \                     _A_ADC10CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADC10CTL1_L
   \                     _A_ADC10CTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADC10CTL2_L
   \                     _A_ADC10CTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADC10MCTL0_L
   \                     _A_ADC10MCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADC10IE_L
   \                     _A_ADC10IE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x238
   \   union <unnamed> _A_PBIES_L
   \                     _A_PBIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x340
   \   unsigned short volatile TA0CTL
   \                     TA0CTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x342
   \   unsigned short volatile TA0CCTL0
   \                     TA0CCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x352
   \   unsigned short volatile TA0CCR0
   \                     TA0CCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x360
   \   unsigned short volatile TA0EX0
   \                     TA0EX0:
   \   000000                DS8 2
      2          #include  "functions.h"
      3          #include  "macros.h"
      4          
      5          //volatile int Time = 0;

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
      6          volatile int sw1Debounce = DISABLE_DEBOUNCE, sw2Debounce = DISABLE_DEBOUNCE;
   \                     sw1Debounce:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for sw1Debounce>`

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
   \                     sw2Debounce:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for sw2Debounce>`
      7          

   \                                 In  segment CODE, align 2
      8          void Init_Interrupts(void)
   \                     Init_Interrupts:
      9          {
     10          	P4IFG &= ~SW1;
   \   000000   D2C33D02     BIC.B   #0x1, &0x23d
     11          	P4IFG &= ~SW2;
   \   000004   E2C33D02     BIC.B   #0x2, &0x23d
     12          	P4IE |= SW1;
   \   000008   D2D33B02     BIS.B   #0x1, &0x23b
     13          	P4IE |= SW2;
   \   00000C   E2D33B02     BIS.B   #0x2, &0x23b
     14          	P4IES |= SW1 | SW2;
   \   000010   F2D003003902 BIS.B   #0x3, &0x239
     15          	
     16          	TA0CTL |= TASSEL__SMCLK;
   \   000016   B2D000024003 BIS.W   #0x200, &0x340
     17          	TA0CTL |= TACLR;
   \   00001C   A2D24003     BIS.W   #0x4, &0x340
     18          	TA0CTL |= MC__UP;
   \   000020   B2D010004003 BIS.W   #0x10, &0x340
     19          	TA0CTL |= ID__2;
   \   000026   B2D040004003 BIS.W   #0x40, &0x340
     20          	TA0CTL &= ~TAIE;
   \   00002C   A2C34003     BIC.W   #0x2, &0x340
     21          	TA0CTL &= ~TAIFG;
   \   000030   92C34003     BIC.W   #0x1, &0x340
     22          	
     23          	TA0EX0 = TAIDEX_7;
   \   000034   B24007006003 MOV.W   #0x7, &0x360
     24          	
     25          	TA0CCR0 = TA0_ROLLOVER; //1ms
   \   00003A   B240F4015203 MOV.W   #0x1f4, &0x352
     26          	TA0CCTL0 |= CCIE;    
   \   000040   B2D010004203 BIS.W   #0x10, &0x342
     27          		
     28          		
     29          	//Init ADC
     30          #define RESET_STATE (0); 
     31          	ADC10CTL0 = RESET_STATE; // Clear ADC10CTL0
   \   000046   82430007     MOV.W   #0x0, &0x700
     32          	ADC10CTL0 |= ADC10SHT_2; // 16 ADC clocks
   \   00004A   B2D000020007 BIS.W   #0x200, &0x700
     33          	ADC10CTL0 &= ~ADC10MSC; // Single Sequence
   \   000050   B2C080000007 BIC.W   #0x80, &0x700
     34          	ADC10CTL0 |= ADC10ON; // ADC ON - Core Enabled
   \   000056   B2D010000007 BIS.W   #0x10, &0x700
     35          	
     36          	ADC10CTL1 = RESET_STATE; // Clear ADC10CTL1
   \   00005C   82430207     MOV.W   #0x0, &0x702
     37          	ADC10CTL1 |= ADC10SHS_0; // ADC10SC bit
   \   000060   924202070207 MOV.W   &0x702, &0x702
     38          	ADC10CTL1 |= ADC10SHP; // SAMPCON signal sourced from sampling timer
   \   000066   B2D000020207 BIS.W   #0x200, &0x702
     39          	ADC10CTL1 &= ~ADC10ISSH; // The sample-input signal is not inverted.
   \   00006C   B2C000010207 BIC.W   #0x100, &0x702
     40          	ADC10CTL1 |= ADC10DIV_0; // ADC10_B clock divider – Divide by 1.
   \   000072   924202070207 MOV.W   &0x702, &0x702
     41          	ADC10CTL1 |= ADC10SSEL_0; // MODCLK
   \   000078   924202070207 MOV.W   &0x702, &0x702
     42          	ADC10CTL1 |= ADC10CONSEQ_0; // Single-channel, single-conversion
   \   00007E   924202070207 MOV.W   &0x702, &0x702
     43          	
     44          	ADC10CTL2 = RESET_STATE; // Clear ADC10CTL2
   \   000084   82430407     MOV.W   #0x0, &0x704
     45          	ADC10CTL2 |= ADC10DIV_0; // Pre-divide by 1
   \   000088   924204070407 MOV.W   &0x704, &0x704
     46          	ADC10CTL2 |= ADC10RES; // 10-bit resolution
   \   00008E   B2D010000407 BIS.W   #0x10, &0x704
     47          	ADC10CTL2 &= ~ADC10DF; // Binary unsigned
   \   000094   B2C20407     BIC.W   #0x8, &0x704
     48          	ADC10CTL2 &= ~ADC10SR; // supports up to approximately 200 ksps
   \   000098   A2C20407     BIC.W   #0x4, &0x704
     49          	
     50          	ADC10MCTL0 = RESET_STATE; // Clear ADC10MCTL0
   \   00009C   82430A07     MOV.W   #0x0, &0x70a
     51          	ADC10MCTL0 |= ADC10SREF_0; // V(R+) = AVCC and V(R-) = AVSS
   \   0000A0   92420A070A07 MOV.W   &0x70a, &0x70a
     52          	ADC10MCTL0 |= ADC10INCH_3; // Channel A3 Thumb Wheel
   \   0000A6   B2D003000A07 BIS.W   #0x3, &0x70a
     53          	ADC10IE |= ADC10IE0; // Enable ADC conversion complete interrupt
   \   0000AC   92D31A07     BIS.W   #0x1, &0x71a
     54          }
   \   0000B0   1001         RETA
   \   0000B2                REQUIRE _A_PBIFG_L
   \   0000B2                REQUIRE _A_PBIE_L
   \   0000B2                REQUIRE _A_PBIES_L
   \   0000B2                REQUIRE TA0CTL
   \   0000B2                REQUIRE TA0EX0
   \   0000B2                REQUIRE TA0CCR0
   \   0000B2                REQUIRE TA0CCTL0
   \   0000B2                REQUIRE _A_ADC10CTL0_L
   \   0000B2                REQUIRE _A_ADC10CTL1_L
   \   0000B2                REQUIRE _A_ADC10CTL2_L
   \   0000B2                REQUIRE _A_ADC10MCTL0_L
   \   0000B2                REQUIRE _A_ADC10IE_L

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for sw1Debounce>`:
   \   000000   FFFF         DC16 -1

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for sw2Debounce>`:
   \   000000   FFFF         DC16 -1
     55          
     56          
     57          
     58          
     59          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for sw1Debounce>
       2  ?<Initializer for sw2Debounce>
     178  Init_Interrupts
       2  TA0CCR0
       2  TA0CCTL0
       2  TA0CTL
       2  TA0EX0
       2  _A_ADC10CTL0_L
       2  _A_ADC10CTL1_L
       2  _A_ADC10CTL2_L
       2  _A_ADC10IE_L
       2  _A_ADC10MCTL0_L
       2  _A_PBIES_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  sw1Debounce
       2  sw2Debounce

 
 178 bytes in segment CODE
  24 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
 
 178 bytes of CODE  memory
   4 bytes of CONST memory
   4 bytes of DATA  memory (+ 24 bytes shared)

Errors: none
Warnings: none
