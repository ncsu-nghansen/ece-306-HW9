###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       04/Apr/2014  00:28:13 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\adc.c      #
#    Command line  =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\adc.c -lC  #
#                     C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\List #
#                     \ -o C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug #
#                     \Obj\ --no_cse --no_unroll --no_inline                  #
#                     --no_code_motion --no_tbaa --debug -D__MSP430FR5739__   #
#                     -e --double=32 --dlib_config "C:\Program Files          #
#                     (x86)\IAR Systems\Embedded Workbench                    #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\List #
#                     \adc.lst                                                #
#    Object file   =  C:\Users\Nathan\Documents\GitHub\ece-306-HW9\Debug\Obj\ #
#                     adc.r43                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Nathan\Documents\GitHub\ece-306-HW9\adc.c
      1          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADC10CTL0_L
   \                     _A_ADC10CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADC10CTL1_L
   \                     _A_ADC10CTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADC10MCTL0_L
   \                     _A_ADC10MCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADC10MEM0_L
   \                     _A_ADC10MEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADC10IV_L
   \                     _A_ADC10IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2
      2          #include  "functions.h"
      3          #include  "macros.h"
      4          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      5          volatile int ADC_Thumb = 0;
   \                     ADC_Thumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      6          volatile int ADC_LeftIR = 0; 
   \                     ADC_LeftIR:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          volatile int ADC_RightIR = 0;
   \                     ADC_RightIR:
   \   000000                DS8 2
      8          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      9          volatile int OldThumb = 0;
   \                     OldThumb:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile int ScrollIndex = 0;
   \                     ScrollIndex:
   \   000000                DS8 2
     11          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          int AdcChannel = ADC10INCH_0;
   \                     AdcChannel:
   \   000000                DS8 2
     13          
     14          /** 
     15          * ADC10 interrupt service routine
     16          * ADC_Right_Detector; // A00 ADC10INCH_0 - P1.0
     17          * ADC_Left_Detector; // A01 ADC10INCH_1 - P1.1
     18          * ADC_Thumb; // A03 ADC10INCH_3 - P1.3
     19          * ADC_Temp; // A10 ADC10INCH_10 – Temperature REF module
     20          * ADC_Bat; // A11 ADC10INCH_11 - Internal
     21          **/
     22          #pragma vector=ADC10_VECTOR

   \                                 In  segment ISR_CODE, align 2
     23          __interrupt void ADC10_ISR(void)
   \                     ADC10_ISR:
     24          {
   \   000000   0F12         PUSH.W  R15
     25          	switch(__even_in_range(ADC10IV,12)) 
   \   000002   1F421E07     MOV.W   &0x71e, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for ADC10_ISR>_0`:
   \   000008   2C3C         JMP     ??ADC10_ISR_1
   \   00000A   2B3C         JMP     ??ADC10_ISR_1
   \   00000C   2A3C         JMP     ??ADC10_ISR_1
   \   00000E   293C         JMP     ??ADC10_ISR_1
   \   000010   283C         JMP     ??ADC10_ISR_1
   \   000012   273C         JMP     ??ADC10_ISR_1
   \   000014   003C         JMP     ??ADC10_ISR_5
     26          	{
     27          		case 0: break; // No interrupt
     28          		case 2: break; // conversion result overflow
     29          		case 4: break; // conversion time overflow
     30          		case 6: break; // ADC10HI
     31          		case 8: break; // ADC10LO
     32          		case 10: break; // ADC10IN
     33          		case 12:
     34                            
     35          			ADC10CTL0 &= ~ADC10ENC;
   \                     ??ADC10_ISR_5:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     36          				
     37          			switch(AdcChannel)//Put an incrementing break statement to update different channels in turn
   \   00001A   1F42....     MOV.W   &AdcChannel, R15
   \   00001E   0F83         SUB.W   #0x0, R15
   \   000020   0524         JEQ     ??ADC10_ISR_2
   \   000022   1F83         SUB.W   #0x1, R15
   \   000024   0B24         JEQ     ??ADC10_ISR_3
   \   000026   1F83         SUB.W   #0x1, R15
   \   000028   1224         JEQ     ??ADC10_ISR_4
   \   00002A   183C         JMP     ??ADC10_ISR_0
     38          			{
     39          				case 0: 
     40          					ADC_LeftIR = ADC10MEM0;
   \                     ??ADC10_ISR_2:
   \   00002C   92421207.... MOV.W   &0x712, &ADC_LeftIR
     41          					ADC10MCTL0 = ADC10INCH_1;
   \   000032   92430A07     MOV.W   #0x1, &0x70a
     42          					AdcChannel = 1;
   \   000036   9243....     MOV.W   #0x1, &AdcChannel
     43          					break;
   \   00003A   103C         JMP     ??ADC10_ISR_0
     44          				case 1:
     45          					ADC_RightIR = ADC10MEM0;
   \                     ??ADC10_ISR_3:
   \   00003C   92421207.... MOV.W   &0x712, &ADC_RightIR
     46          					ADC10MCTL0 = ADC10INCH_3;
   \   000042   B24003000A07 MOV.W   #0x3, &0x70a
     47          					AdcChannel = 2;
   \   000048   A243....     MOV.W   #0x2, &AdcChannel
     48          					break;
   \   00004C   073C         JMP     ??ADC10_ISR_0
     49          				case 2:
     50          					ADC_Thumb = ADC10MEM0; 
   \                     ??ADC10_ISR_4:
   \   00004E   92421207.... MOV.W   &0x712, &ADC_Thumb
     51          					ADC10MCTL0 = ADC10INCH_0;
   \   000054   82430A07     MOV.W   #0x0, &0x70a
     52          					AdcChannel = 0;
   \   000058   8243....     MOV.W   #0x0, &AdcChannel
     53          					break;
     54          				default:
     55          					break;
     56          			}
     57                                  
     58                                  ADC10CTL0 |= ADC10ENC | ADC10SC;
   \                     ??ADC10_ISR_0:
   \   00005C   B2D003000007 BIS.W   #0x3, &0x700
     59                                  break;
     60                                  
     61          		default: 
     62          			break;
     63          	}
     64          }
   \                     ??ADC10_ISR_1:
   \   000062   3F41         POP.W   R15
   \   000064   0013         RETI
   \   000066                REQUIRE _A_ADC10CTL0_L
   \   000066                REQUIRE _A_ADC10MEM0_L
   \   000066                REQUIRE _A_ADC10MCTL0_L
   \   000066                REQUIRE _A_ADC10IV_L
     65          

   \                                 In  segment CODE, align 2
     66          void ADC_Process(void)
   \                     ADC_Process:
     67          {
     68          	P1OUT |= IR_LED;
   \   000000   E2D20202     BIS.B   #0x4, &0x202
     69                  
     70          	while (ADC10CTL1 & BUSY); // Wait if ADC10 core is active
   \                     ??ADC_Process_0:
   \   000004   92B30207     BIT.W   #0x1, &0x702
   \   000008   FD2F         JC      ??ADC_Process_0
     71          	ADC10CTL0 |= ADC10ENC | ADC10SC; // Sampling and conversion start
   \   00000A   B2D003000007 BIS.W   #0x3, &0x700
     72          }
   \   000010   1001         RETA
   \   000012                REQUIRE _A_PAOUT_L
   \   000012                REQUIRE _A_ADC10CTL1_L
   \   000012                REQUIRE _A_ADC10CTL0_L

   \                                 In  segment INTVEC, offset 0x5c, root
   \                     `??ADC10_ISR??INTVEC 92`:
   \   00005C   ....         DC16    ADC10_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   ADC10_ISR
      4   ADC_Process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??ADC10_ISR??INTVEC 92
     102  ADC10_ISR
       2  ADC_LeftIR
      18  ADC_Process
       2  ADC_RightIR
       2  ADC_Thumb
       2  AdcChannel
       2  OldThumb
       2  ScrollIndex
       2  _A_ADC10CTL0_L
       2  _A_ADC10CTL1_L
       2  _A_ADC10IV_L
       2  _A_ADC10MCTL0_L
       2  _A_ADC10MEM0_L
       2  _A_PAOUT_L

 
  18 bytes in segment CODE
  12 bytes in segment DATA16_AN
  12 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 102 bytes in segment ISR_CODE
 
 120 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
  12 bytes of DATA  memory (+ 12 bytes shared)

Errors: none
Warnings: none
