###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       03/Apr/2014  00:02:40 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\ti #
#                     mers.c                                                  #
#    Command line  =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\ti #
#                     mers.c -lC C:\Users\Nathan\Documents\GitHub\ece306-gps- #
#                     receiver\Debug\List\ -o C:\Users\Nathan\Documents\GitHu #
#                     b\ece306-gps-receiver\Debug\Obj\ --no_cse --no_unroll   #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430FR5739__ -e --double=32 --dlib_config         #
#                     "C:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\De #
#                     bug\List\timers.lst                                     #
#    Object file   =  C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\De #
#                     bug\Obj\timers.r43                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Nathan\Documents\GitHub\ece306-gps-receiver\timers.c
      1          /******************************************************************************
      2          Timer Configuration
      3          
      4          DESC: Contains methods serves to set up a timer based in a precompiled file
      5          
      6          GLOBALS: None
      7          
      8          Nathan Hansen, 7 Feb 2014, Built with IAR Embedded Workbench Version: 5.60.5
      9          ******************************************************************************/
     10          
     11          #include  "functions.h"
     12          #include  "macros.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2
     14          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int TimeMsec = 0;
   \                     TimeMsec:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int CommTimer = 0;
   \                     CommTimer:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int MotorTimer = 0;
   \                     MotorTimer:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int DebounceTimer = 0;
   \                     DebounceTimer:
   \   000000                DS8 2
     19          
     20          #pragma vector=TIMER0_A0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     21          __interrupt void Timer0_A0(void)
   \                     Timer0_A0:
     22          {
     23          	P3OUT ^= TEST_PROBE;
   \   000000   F2E22202     XOR.B   #0x8, &0x222
     24          	TimeMsec++;
   \   000004   9253....     ADD.W   #0x1, &TimeMsec
     25                  
     26          	if(MotorTimer > 0)
   \   000008   8293....     CMP.W   #0x0, &MotorTimer
   \   00000C   0224         JEQ     ??Timer0_A0_0
     27          		MotorTimer--;
   \   00000E   B253....     ADD.W   #0xffff, &MotorTimer
     28          	if(DebounceTimer > 0)
   \                     ??Timer0_A0_0:
   \   000012   8293....     CMP.W   #0x0, &DebounceTimer
   \   000016   0224         JEQ     ??Timer0_A0_1
     29          		DebounceTimer--;
   \   000018   B253....     ADD.W   #0xffff, &DebounceTimer
     30          	if(CommTimer > 0)
   \                     ??Timer0_A0_1:
   \   00001C   8293....     CMP.W   #0x0, &CommTimer
   \   000020   0224         JEQ     ??Timer0_A0_2
     31          		CommTimer--;
   \   000022   B253....     ADD.W   #0xffff, &CommTimer
     32          }
   \                     ??Timer0_A0_2:
   \   000026   0013         RETI
   \   000028                REQUIRE _A_PBOUT_L
     33          

   \                                 In  segment CODE, align 2
     34          void Init_Timers(void)
   \                     Init_Timers:
     35          {
     36          	//Init_Timer_A0(); //
     37          	//Init_Timer_A1(); //
     38          	//Init_Timer_B0(); //
     39          	//Init_Timer_B1(); //
     40          	Init_Timer_B2();   //  Required for provided compiled code to work
   \   000000   ........     BRA     #Init_Timer_B2
     41          }
     42          

   \                                 In  segment CODE, align 2
     43          void waitMsec(int time)
   \                     waitMsec:
     44          {
     45          	int lastTime = TimeMsec, timeElapsed = RESET_TIME;
   \   000000   1F42....     MOV.W   &TimeMsec, R15
   \   000004   0E43         MOV.W   #0x0, R14
   \   000006   063C         JMP     ??waitMsec_1
     46          	
     47          	while(timeElapsed < time)
     48          	{
     49          		if(lastTime != TimeMsec)
   \                     ??waitMsec_0:
   \   000008   1F92....     CMP.W   &TimeMsec, R15
   \   00000C   0324         JEQ     ??waitMsec_1
     50          		{
     51          			timeElapsed++;
   \   00000E   1E53         ADD.W   #0x1, R14
     52          			lastTime = TimeMsec;
   \   000010   1F42....     MOV.W   &TimeMsec, R15
     53          		}
     54          	}
   \                     ??waitMsec_1:
   \   000014   0E9C         CMP.W   R12, R14
   \   000016   F83B         JL      ??waitMsec_0
     55          }
   \   000018   1001         RETA

   \                                 In  segment INTVEC, offset 0x5a, root
   \                     `??Timer0_A0??INTVEC 90`:
   \   00005A   ....         DC16    Timer0_A0

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timers
        4   -> Init_Timer_B2
      4   Timer0_A0
      4   waitMsec


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??Timer0_A0??INTVEC 90
       2  CommTimer
       2  DebounceTimer
       4  Init_Timers
       2  MotorTimer
       2  TimeMsec
      40  Timer0_A0
       2  _A_PBOUT_L
      26  waitMsec

 
 30 bytes in segment CODE
  2 bytes in segment DATA16_AN
  8 bytes in segment DATA16_Z
  2 bytes in segment INTVEC
 40 bytes in segment ISR_CODE
 
 70 bytes of CODE  memory
  0 bytes of CONST memory (+ 2 bytes shared)
  8 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
